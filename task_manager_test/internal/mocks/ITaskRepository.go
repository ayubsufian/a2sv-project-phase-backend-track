// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager_test/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ITaskRepository is an autogenerated mock type for the ITaskRepository type
type ITaskRepository struct {
	mock.Mock
}

type ITaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ITaskRepository) EXPECT() *ITaskRepository_Expecter {
	return &ITaskRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, t
func (_m *ITaskRepository) Create(ctx context.Context, t domain.Task) (domain.Task, error) {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (domain.Task, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) domain.Task); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ITaskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - t domain.Task
func (_e *ITaskRepository_Expecter) Create(ctx interface{}, t interface{}) *ITaskRepository_Create_Call {
	return &ITaskRepository_Create_Call{Call: _e.mock.On("Create", ctx, t)}
}

func (_c *ITaskRepository_Create_Call) Run(run func(ctx context.Context, t domain.Task)) *ITaskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *ITaskRepository_Create_Call) Return(_a0 domain.Task, _a1 error) *ITaskRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskRepository_Create_Call) RunAndReturn(run func(context.Context, domain.Task) (domain.Task, error)) *ITaskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ITaskRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITaskRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ITaskRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ITaskRepository_Expecter) Delete(ctx interface{}, id interface{}) *ITaskRepository_Delete_Call {
	return &ITaskRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ITaskRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *ITaskRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITaskRepository_Delete_Call) Return(_a0 error) *ITaskRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITaskRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *ITaskRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *ITaskRepository) GetAll(ctx context.Context) ([]domain.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ITaskRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ITaskRepository_Expecter) GetAll(ctx interface{}) *ITaskRepository_GetAll_Call {
	return &ITaskRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ITaskRepository_GetAll_Call) Run(run func(ctx context.Context)) *ITaskRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ITaskRepository_GetAll_Call) Return(_a0 []domain.Task, _a1 error) *ITaskRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.Task, error)) *ITaskRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ITaskRepository) GetByID(ctx context.Context, id string) (domain.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ITaskRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ITaskRepository_Expecter) GetByID(ctx interface{}, id interface{}) *ITaskRepository_GetByID_Call {
	return &ITaskRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ITaskRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *ITaskRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITaskRepository_GetByID_Call) Return(_a0 domain.Task, _a1 error) *ITaskRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (domain.Task, error)) *ITaskRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, t
func (_m *ITaskRepository) Update(ctx context.Context, t domain.Task) (domain.Task, error) {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (domain.Task, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) domain.Task); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITaskRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ITaskRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - t domain.Task
func (_e *ITaskRepository_Expecter) Update(ctx interface{}, t interface{}) *ITaskRepository_Update_Call {
	return &ITaskRepository_Update_Call{Call: _e.mock.On("Update", ctx, t)}
}

func (_c *ITaskRepository_Update_Call) Run(run func(ctx context.Context, t domain.Task)) *ITaskRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *ITaskRepository_Update_Call) Return(_a0 domain.Task, _a1 error) *ITaskRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITaskRepository_Update_Call) RunAndReturn(run func(context.Context, domain.Task) (domain.Task, error)) *ITaskRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewITaskRepository creates a new instance of ITaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskRepository {
	mock := &ITaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
