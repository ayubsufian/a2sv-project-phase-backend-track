// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager_test/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

type IUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserRepository) EXPECT() *IUserRepository_Expecter {
	return &IUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, u
func (_m *IUserRepository) Create(ctx context.Context, u domain.User) (domain.User, error) {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - u domain.User
func (_e *IUserRepository_Expecter) Create(ctx interface{}, u interface{}) *IUserRepository_Create_Call {
	return &IUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, u)}
}

func (_c *IUserRepository_Create_Call) Run(run func(ctx context.Context, u domain.User)) *IUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *IUserRepository_Create_Call) Return(_a0 domain.User, _a1 error) *IUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_Create_Call) RunAndReturn(run func(context.Context, domain.User) (domain.User, error)) *IUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *IUserRepository) FindByUsername(ctx context.Context, username string) (domain.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type IUserRepository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *IUserRepository_Expecter) FindByUsername(ctx interface{}, username interface{}) *IUserRepository_FindByUsername_Call {
	return &IUserRepository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", ctx, username)}
}

func (_c *IUserRepository_FindByUsername_Call) Run(run func(ctx context.Context, username string)) *IUserRepository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IUserRepository_FindByUsername_Call) Return(_a0 domain.User, _a1 error) *IUserRepository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_FindByUsername_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *IUserRepository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
