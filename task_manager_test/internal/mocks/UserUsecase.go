// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager_test/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

type UserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecase) EXPECT() *UserUsecase_Expecter {
	return &UserUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *UserUsecase) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *UserUsecase_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *UserUsecase_Login_Call {
	return &UserUsecase_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *UserUsecase_Login_Call) Run(run func(ctx context.Context, username string, password string)) *UserUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserUsecase_Login_Call) Return(_a0 string, _a1 error) *UserUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *UserUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, u
func (_m *UserUsecase) Register(ctx context.Context, u domain.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - u domain.User
func (_e *UserUsecase_Expecter) Register(ctx interface{}, u interface{}) *UserUsecase_Register_Call {
	return &UserUsecase_Register_Call{Call: _e.mock.On("Register", ctx, u)}
}

func (_c *UserUsecase_Register_Call) Run(run func(ctx context.Context, u domain.User)) *UserUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *UserUsecase_Register_Call) Return(_a0 error) *UserUsecase_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_Register_Call) RunAndReturn(run func(context.Context, domain.User) error) *UserUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
